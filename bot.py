import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '7600398699:AAGlzLpkKLrQ-OmG3tyaGN0uyss6rdxJAgM'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('habits.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS habits (
    user_id INTEGER,
    date TEXT,
    drank INTEGER DEFAULT 0,
    smoked INTEGER DEFAULT 0,
    PRIMARY KEY (user_id, date)
)
''')
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_markup():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîµ –ü–∏–ª", callback_data="drink"),
            InlineKeyboardButton(text="üü¢ –ö—É—Ä–∏–ª", callback_data="smoke")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ü–∏–ª –∏ –∫—É—Ä–∏–ª", callback_data="both"),
            InlineKeyboardButton(text="‚ö™Ô∏è –ù–∏—á–µ–≥–æ", callback_data="none")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")
        ]
    ])
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    markup = create_markup()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    date = datetime.now().strftime('%Y-%m-%d')
    action = callback_query.data

    if action == "drink":
        cursor.execute('INSERT OR REPLACE INTO habits (user_id, date, drank) VALUES (?, ?, ?)', (user_id, date, 1))
        conn.commit()
        await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –ø–∏–ª —Å–µ–≥–æ–¥–Ω—è!")
    elif action == "smoke":
        cursor.execute('INSERT OR REPLACE INTO habits (user_id, date, smoked) VALUES (?, ?, ?)', (user_id, date, 1))
        conn.commit()
        await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –∫—É—Ä–∏–ª —Å–µ–≥–æ–¥–Ω—è!")
    elif action == "both":
        cursor.execute('INSERT OR REPLACE INTO habits (user_id, date, drank, smoked) VALUES (?, ?, ?, ?)', (user_id, date, 1, 1))
        conn.commit()
        await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –ø–∏–ª –∏ –∫—É—Ä–∏–ª —Å–µ–≥–æ–¥–Ω—è!")
    elif action == "none":
        cursor.execute('INSERT OR REPLACE INTO habits (user_id, date, drank, smoked) VALUES (?, ?, ?, ?)', (user_id, date, 0, 0))
        conn.commit()
        await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è!")
    elif action == "calendar":
        await show_calendar(callback_query)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async def show_calendar(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute('SELECT date, drank, smoked FROM habits WHERE user_id = ?', (user_id,))
    records = cursor.fetchall()

    calendar = {}
    for record in records:
        date, drank, smoked = record
        if drank and smoked:
            calendar[date] = 'üî¥'  # –ò –ø–∏–ª, –∏ –∫—É—Ä–∏–ª
        elif drank:
            calendar[date] = 'üîµ'  # –ü–∏–ª
        elif smoked:
            calendar[date] = 'üü¢'  # –ö—É—Ä–∏–ª
        else:
            calendar[date] = '‚ö™Ô∏è'  # –ù–∏—á–µ–≥–æ

    response = "–¢–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n"
    for date, emoji in calendar.items():
        response += f"{date}: {emoji}\n"

    await bot.send_message(callback_query.from_user.id, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)